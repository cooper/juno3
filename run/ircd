#!/usr/bin/perl
# Copyright (c) 2011, Mitchell Cooper

use warnings;
use strict;
use feature 'say';

our $run_dir;

# find the running directory.

BEGIN {

    if ($#ARGV < 0) {
        die "No directory specified.\n"
    }

    $run_dir = shift @ARGV;

    # make sure the run directory exists.
    if (!-d $run_dir) {
        die "Run directory does not exist.\n"
    }

    chdir $run_dir or die "Can't access run directory.\n";
    unshift @INC, "$run_dir/inc"

}

use POSIX;
use IO::Socket;
use IO::Select;

use connection;
use utils qw[conf log2 fatal];

my (%listen, %inbuffer, %outbuffer, @sel);
my $listen_class = 'IO::Socket::INET';

start();
our $select = new IO::Select @sel;

# main loop

mainloop: for (;;) {

    # incoming

    foreach my $socket ($select->can_read(1)) {

        # new connection
        if (exists $listen{$socket}) {
            connection->new($socket->accept)
        }

        # incoming data
        else {

            my $conn = $connection::connection{$socket};

            if (sysread $socket, my $data, POSIX::BUFSIZ, 0) {
                $conn->handle($_) foreach split "\n", $data
            }

            # can't read the data
            else {
                #$conn->end
            }

        }

    }

    foreach my $socket ($select->can_write(1)) {
        
    }

}

sub start {

    log2('Started at '.localtime time);

    # parse the configuration, load the required modules, and listen
    utils::parse_config('etc/ircd.conf') or die "Can't parse configuration.\n";
    load_requirements();
    create_sockets();
    fatal('Not listening') if $#sel < 0

}

sub load_requirements {

    if (conf qw[enabled ipv6]) {
        log2('Loading IO::Socket::INET6');
        require IO::Socket::INET6;
        $listen_class = 'IO::Socket::INET6'
    }

}

sub create_sockets {

    while (my ($addr, $bl) = each %{$utils::conf{listen}}) {

        foreach my $port (split /\s+/, $bl->{port}) {

            # create the socket and add it to the IO::Select object

            my $socket = $listen_class->new(
                LocalAddr => $addr,
                LocalPort => $port,
                Listen => 1,
                ReuseAddr => 1,
                Proto => 'tcp'
            ) or fatal("Couldn't listen on [$addr]:$port: $!");

            log2("Listening on [$addr]:$port");
            $listen{$socket} = [$addr, $port];
            push @sel, $socket

        }

    }

    return 1

}

# send data to a peer

sub sendpeer {
    my $peer = shift;
}
