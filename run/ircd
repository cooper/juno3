#!/usr/bin/perl
# Copyright (c) 2011, Mitchell Cooper

use warnings;
use strict;
use feature 'say';

our $run_dir;
our $VERSION = '0.1.4';
our $PROTO = '0.0.1';

# find the running directory.

BEGIN {

    if ($#ARGV < 0) {
        die "No directory specified.\n"
    }

    $run_dir = shift @ARGV;

    # make sure the run directory exists.
    if (!-d $run_dir) {
        die "Run directory does not exist.\n"
    }

    chdir $run_dir or die "Can't access run directory.\n";
    unshift @INC, "$run_dir/inc"

}

use POSIX;
use IO::Select;

use connection;
use user;
use server;
use utils qw[conf log2 fatal];

my (%listen, %inbuffer, %outbuffer, %timer, @sel, $listen_class);

start();
our $select;

# main loop

mainloop: for (;;) {

    # incoming

    in: foreach my $socket ($select->can_read(1)) {

        my ($time, $conn) = time;
        $timer{$socket} = 0 unless $timer{$socket};

        # new connection

        if (exists $listen{$socket}) {
            connection->new($socket->accept);
            next in
        }

        # incoming data

        else {

            $timer{$socket} = $time if $timer{$socket} < $time;
            $conn = $connection::connection{$socket};

            if (sysread $socket, my $data, POSIX::BUFSIZ, 0) {
                $inbuffer{$socket} .= $data
            }

            # can't read the data

            else {
                $conn->done('Connection closed');
                next in
            }

        }

        # flood check

        my ($theline, $therest);

        while ( ($timer{$socket}-(conf qw[flood lines]) <= $time ) &&
          ( ($theline, $therest) = $inbuffer{$socket} =~ m/([^\n]*)\n(.*)/s) ) {

            $inbuffer{$socket} = $therest;
            $theline =~ s/\r$//;

            # they're okay, so handle the data

            $conn->handle($theline);
            $timer{$socket}++

        }

        # they've reached their limit; force them to quit

        $connection::connection{$socket}->done(conf qw[flood msg])
        if length $inbuffer{$socket} > conf qw[flood bytes];

    }

    out: foreach my $socket ($select->can_write(0)) {

        # nothing to write
        next unless exists $outbuffer{$socket};

        # send the data
        my $sent = syswrite $socket, $outbuffer{$socket}, POSIX::BUFSIZ;

        if (defined $sent &&
          $sent <= length $outbuffer{$socket}
          || $! == POSIX::EWOULDBLOCK) {

            (substr $outbuffer{$socket}, 0, $sent) = '';
            delete $outbuffer{$socket} unless length $outbuffer{$socket}

        }

        # can't write to this socket, so give up and force the user to quit

        else {
            $connection::connection{$socket}->done('Write error')
        }

    }

}

sub start {

    log2('Started at '.localtime time);

    # parse the configuration, load the required modules, and listen

    utils::parse_config('etc/ircd.conf') or die "Can't parse configuration.\n";

    # create the main server object
    $utils::GV{server} = server->new({
        sid   => $utils::GV{serverid},
        name  => $utils::GV{servername},
        proto => 0.1,
        ircd  => $VERSION
    });

    load_requirements();
    create_sockets();
    fatal('Not listening') if $#sel < 0;

    $select = new IO::Select @sel;

    # auto server connect
    while (my ($name, $serv) = each %{$utils::conf{connect}}) {
        connect_server($name) if $serv->{autoconnect}
    }

}

sub load_requirements {

    if (defined( my $pkg = conf qw[class normal_package] )) {
        log2('Loading '.$pkg);
        $pkg =~ s/::/\//g;
        require "$pkg.pm"
    }

    if (defined( my $class = conf qw[class normal_class] )) {
        $listen_class = $class
    }

    if (conf qw[enabled sha]) {
        log2('Loading Digest::SHA');
        require Digest::SHA
    }

    if (conf qw[enabled md5]) {
        log2('Loading Digest::MD5');
        require Digest::SHA
    }

}

sub create_sockets {

    while (my ($addr, $bl) = each %{$utils::conf{listen}}) {

        foreach my $port (split /\s+/, $bl->{port}) {

            # create the socket and add it to the IO::Select object

            my $socket = $listen_class->new(
                LocalAddr => $addr,
                LocalPort => $port,
                Listen    => 1,
                ReuseAddr => 1,
                Proto     => 'tcp'
            ) or fatal("Couldn't listen on [$addr]:$port: $!");

            log2("Listening on [$addr]:$port");
            $listen{$socket} = [$addr, $port];
            push @sel, $socket

        }

    }

    return 1

}

# add data to the outgoing buffer

sub sendpeer {
    my $peer = shift;
    $outbuffer{$peer} .= "$_\r\n" foreach @_
}

# connect to a server

sub connect_server {
    my $server = shift;

    unless (exists $utils::conf{connect}{$server}) {
        log2("Attempted to connect to nonexistent server: $server");
        return
    }

    my %serv = %{$utils::conf{connect}{$server}};

    # create the socket
    my $socket = $listen_class->new(
        PeerAddr => $serv{addr},
        PeerPort => $serv{port},
        Proto    => 'tcp',
        Timeout  => 5
    );

    if (!$socket) {
        log2("Could not connect to $server: ".($! ? $! : $@));
        return
    }

    log2("Connection established to $server");

    # add the socket to select
    connection->new($socket)->{sent_creds} = 1;

    # send server credentials.
    sendpeer($socket,
        "SERVER $utils::GV{serverid} $utils::GV{servername} $PROTO $VERSION :$utils::GV{serverdesc}",
        "PASS $serv{s_password}"
    );

    return 1

}
