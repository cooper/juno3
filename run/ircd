#!/usr/bin/perl
# Copyright (c) 2011, Mitchell Cooper

use warnings;
use strict;
use feature qw|switch say|;

local ($0,     $SIG{TERM},   $SIG{KILL}, $SIG{HUP},   $SIG{__WARN__}) =
      ('juno', \&terminate, \&terminate, \&signalhup, \&WARNING     );

# temporary vars
my %global;
our $run_dir;
BEGIN {

    # find the directory to run from

    if ( not defined ($run_dir = shift @ARGV) ) {
        die "No directory specified.\n"
    }

    # make sure the run directory exists.
    if (!-d $run_dir) {
        die "Run directory does not exist.\n"
    }

    chdir $run_dir or die "Can't access run directory.\n";
    unshift @INC, "$run_dir/inc";

    # set global variables
    # that will eventually be moved to GV after startup

    %global = (
        NAME    => 'juno-ircd',
        VERSION => '3.2.0.0',
        PROTO   => '0.0.1',
        START   => time,
        NOFORK  => 'NOFORK' ~~ @ARGV
    );

}

use POSIX ();
use IO::Async::Loop::Epoll; # XXX select
use IO::Async::Listener;
use IO::Socket::IP ();

use connection;
use server;
use user;
use channel;
use utils qw[conf lconf log2 fatal gv set];

our $loop = IO::Async::Loop::Epoll->new;

log2("this is $global{NAME} version $global{VERSION}");
%utils::GV = %global;
undef %global;
start();

# become a daemon
if (!gv('NOFORK')) {
    log2('Becoming a daemon...');

    # since there will be no input or output from here on,
    # open the filehandles to /dev/null
    open STDIN,  '<', '/dev/null' or fatal("Can't read /dev/null: $!");
    open STDOUT, '>', '/dev/null' or fatal("Can't write /dev/null: $!");
    open STDERR, '>', '/dev/null' or fatal("Can't write /dev/null: $!");

    # write the PID file that is used by the start/stop/rehash script.
    open my $pidfh, '>', "$run_dir/etc/juno.pid" or fatal("Can't write $run_dir/etc/juno.pid");
    $utils::GV{PID} = fork;
    say $pidfh gv('PID') if gv('PID');
    close $pidfh
}

exit if gv('PID');
POSIX::setsid();

# start IO::Async's loop
$loop->loop_forever; # XXX select

sub start {

    log2('Started server at '.localtime gv('START'));

    # parse the configuration, load the required modules, and listen

    utils::parse_config('etc/ircd.conf') or die "Can't parse configuration.\n";

    # create the main server object
    my $server = server->new({
        source => conf('server', 'id'),
        sid    => conf('server', 'id'),
        name   => conf('server', 'name'),
        desc   => conf('server', 'description'),
        proto  => gv('PROTO'),
        ircd   => gv('VERSION'),
        time   => gv('START'),
        parent => { name => 'self' }
    });

    # how is this possible?!?!
    $server->{parent}  =
    $utils::GV{SERVER} = $server;

    # register modes
    $server->user::modes::add_internal_modes();
    $server->channel::modes::add_internal_modes();

    load_requirements();
    create_sockets();
    log2("server initialization complete");

    # auto server connect
    foreach my $name (keys %{$utils::conf{connect}}) {
        my $serv = $utils::conf{connect}{$name};
        if ($serv->{autoconnect}) {
            log2("autoconnecting to $name...");
            server::linkage::connect_server($name)
        }
    }

}

sub load_requirements {

    if (defined( my $pkg = conf qw[class normal_package] )) {
        log2('Loading '.$pkg);
        $pkg =~ s/::/\//g;
        require "$pkg.pm"
    }

    if (conf qw[enabled sha]) {
        log2('Loading Digest::SHA');
        require Digest::SHA
    }

    if (conf qw[enabled md5]) {
        log2('Loading Digest::MD5');
        require Digest::MD5
    }

    #if (conf qw[enabled resolve]) {
    #    log2('Loading res, Net::IP, Net::DNS');
    #    require res
    #}

}

# XXX select
sub create_sockets {
    foreach my $addr (keys %{$utils::conf{listen}}) {
    foreach my $port (@{$utils::conf{listen}{$addr}->{port}}) {

        # create the loop listener
        my $listener = IO::Async::Listener->new(on_stream => \&handle_connect);
        $loop->add($listener);

        # create the socket
        my $socket = IO::Socket::IP->new(
            LocalAddr => $addr,
            LocalPort => $port,
            Listen    => 1,
            ReuseAddr => 1,
            Type      => Socket::SOCK_STREAM,
            Proto     => 'tcp'
        ) or fatal("Couldn't listen on [$addr]:$port: $!");

        # add to looped listener
        $listener->listen(handle => $socket);

        log2("Listening on [$addr]:$port");
        ${*$socket}{listen} = 1;
    } }
    return 1
}

# stop the ircd
sub terminate {

    log2("removing all connections for server shutdown");

    # delete all users/servers/other
    foreach my $connection (values %connection::connection) {
        $connection->done('shutting down');
    }

    log2("deleting PID file");

    # delete the PID file
    unlink 'etc/juno.pid' or fatal("Can't remove PID file");

    log2("shutting down");
    exit
}

# handle a HUP
sub signalhup {

    # find out what is wanted
    open my $hup, 'etc/HUP' or log2('can\'t open HUP file') and return;

    while (my $line = <$hup>) {
    given ((split /\s+/, $line)[0]) {
        when ('rehash') {
            log2("reloading server configuration file by request of HUP signal");
            utils::parse_config('etc/ircd.conf') or log2("configuration error");
            log2("finished rehashing");              
        }
        when ('terminate') {
            log2("terminating by request of HUP signal");
            terminate();
        }
        deafult { return }
    } }

    return 1
}

# handle warning
sub WARNING { log2(shift) }

# handle connecting user
sub handle_connect {
    my ($listener, $stream) = @_;

    $stream->configure(
        read_all => 0,
        read_len => POSIX::BUFSIZ,
        on_read  => \&handle_data
    );

    # create connection object
    connection->new($stream);

    $loop->add($stream);

}

# handle incoming data
sub handle_data {
    my ($stream, $buffer) = @_;
    my $connection = connection::lookup_by_stream($stream);
    while ($$buffer =~ s/^(.*?)\n//) {
        $connection->handle($1)
    }
}
